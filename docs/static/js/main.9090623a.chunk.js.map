{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototype","PropTypes","func","isRequiered","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","caterogries","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mNAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,iBAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OACQ,sBAAMC,SAbO,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAQd,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAnBxB,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,aAsB/BZ,EAAYe,UAAY,CACpBd,cAAee,IAAUC,KAAKC,a,oCCjCrBC,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAsB,IAArBb,EAAoB,EAApBA,IAAKU,EAAe,EAAfA,MAAe,EAARD,GAGrC,OACI,sBAAKK,UAAU,2DAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCJHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAErB,ECHwB,SAACA,GAE7B,MAA0BlB,mBAAS,CAC/ByB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WAEPxB,EAASC,GACRwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAIlB,CAACpB,IAEGqB,EDhB4BK,CAAc1B,GAAjCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAMpB,OACA,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAEnDoB,GAAW,mBAAGJ,UAAU,mCAAb,sBAEZ,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OAEf,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEiBvBgB,EAnCM,WAIjB,MAAqC7C,mBAAS,CAAC,kBAA/C,mBAAO8C,EAAP,KAAoB/C,EAApB,KASA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,uBAEA,wBAAQgD,QAdE,WAGdhD,EAAc,GAAD,mBAAK+C,GAAL,CAAkB,mBAW3B,qBAEA,6BAEQA,EAAYnB,KAAI,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAWA,GADJA,YClBhB8B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.9090623a.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('Valor Inicial');\r\n\r\n    const handleInputChange = (e) => {\r\n        // console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSumbit = (e) => {\r\n        e.preventDefault();//Para prevenir el comportamiento por defecto del formulario\r\n\r\n        if(inputValue.trim().length > 2) { //.trim para borrar espacios que tienes antes y despues del string\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n        \r\n        \r\n        // console.log('Sumbit Hecho');\r\n    }\r\n    \r\n    return (\r\n            <form onSubmit={handleSumbit}>\r\n                <input type=\"text\" value={inputValue} onChange={handleInputChange}></input>\r\n            </form>\r\n    )\r\n}\r\n\r\nAddCategory.prototype = {\r\n    setCategories: PropTypes.func.isRequiered,\r\n}","export const getGifs = async(category) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=GRJwf45odOqZy5fd9DS8uqJx1YcLAllX`; //EndPoint generado con PostMan\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n            \r\n        }\r\n    })\r\n\r\n    return gifs;\r\n} ","import React from 'react'\r\n\r\nexport const GifGridItem = ({url, title, id}) => {\r\n\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn animate__delay-1s'>\r\n            <img src={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFetchGifs( category ); //renombrar en desestructuracin nombreactual:nombrenuevo\r\n    // useEffect(() => {\r\n    //     getGifs(category)\r\n    //     .then(setImages);\r\n    // }, [category])\r\n    \r\n    return (\r\n    <>\r\n        <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n\r\n        {loading && <p className=\"animate__animated animate__flash\">cargando</p>}\r\n\r\n        <div className='card-grid'>\r\n            {\r\n                images.map( img => (\r\n                \r\n                <GifGridItem key={img.id} {...img} /> //Utilizas el operador spread para traer todas las propiedades de las imagenes como una propiedad independient \r\n                \r\n                ))\r\n            }\r\n        </div>\r\n    </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    \r\nconst [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n})\r\n\r\nuseEffect( () => {\r\n\r\n    getGifs( category )\r\n    .then(imgs => {\r\n        setState({\r\n            data: imgs,\r\n            loading: false\r\n        })\r\n    })\r\n    \r\n}, [category])\r\n\r\nreturn state;\r\n\r\n\r\n}","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n    \r\n    // const caterogries = ['One Punch Man', 'Dragon Ball', 'Samurai X']\r\n    \r\n    const [caterogries, setCategories] = useState(['One Punch Man']);\r\n\r\n    const handleAdd = () => {\r\n        /** TAREA: Al presionar el boton mandar a llamar handleAdd y aÃ±adir un nuevo Elemento al arreglo*/\r\n        // setCategories('Boku No Hero'); si yo quiero definir el estado nuevo asi de un arreglo estoy eliminando el estado anterior.\r\n        setCategories([...caterogries, 'Boku No Hero']);\r\n        //setCategories(cats => [...cats, 'Boku No Hero']);\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n\r\n            <hr/>\r\n\r\n            <button onClick={handleAdd}>Agregar</button>\r\n\r\n            <ol>\r\n                {\r\n                    caterogries.map(category => (\r\n                        <GifGrid \r\n                        key = {category}\r\n                        category={ category }/>)\r\n                        )\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GifExpertApp from './GifExpertApp';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <GifExpertApp/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n/**\r\n * Tarea\r\n * GifExpertApp\r\n * <h2>GifExpertApp</h2>\r\n * <hr/>\r\n */\r\n"],"sourceRoot":""}